name: Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - qa
      - main
    paths:
      - infra/**  # Trigger on changes in the infra directory
      - frontend/**  # Trigger on changes in the frontend directory
      - backend/**  # Trigger on changes in the backend directory
      - .github/workflows/deploy.yaml  # Trigger on changes to this workflow file

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  # Step 1: Bootstrap Backend Resources (if not already done)
  backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}  # Use the branch name as environment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id:        ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:        ${{ secrets.AZURE_TENANT_ID }}
          subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Create backend resources
        run: |
          # Define variables for the backend resources
          az_backend_rg_name="${{ vars.AZURE_BKD_RGROUP_NAME }}"
          az_backend_sa_name="${{ vars.AZURE_BKD_SA_NAME }}"
          az_backend_container_name="${{ vars.AZURE_BKD_CONTAINER_NAME }}"
          az_location="${{ vars.AZURE_LOCATION }}"
          
          # Create resource group if it doesn't exist
          az group create --name $az_backend_rg_name --location $az_location

          # Create storage account if it doesn't exist
          az storage account create \
            --name $az_backend_sa_name \
            --resource-group $az_backend_rg_name \
            --location $az_location \
            --sku Standard_LRS

          # Adding a small delay to ensure the storage account is fully provisioned
          # sleep 15

          # Get the storage account key
          STORAGE_KEY=$(az storage account keys list --resource-group $az_backend_rg_name --account-name $az_backend_sa_name --query '[0].value' -o tsv)

          # Create storage container if it doesn't exist
          az storage container create \
            --name $az_backend_container_name \
            --account-name $az_backend_sa_name \
            --account-key $STORAGE_KEY
  
  # Main Terraform Deployment
  deploy:
    name: Deploy Environment
    runs-on: ubuntu-latest
    needs: backend  # Ensure backend resources are created first
    environment: ${{ github.ref_name }}  # Use the branch name as environment
    
    # define output variables for the backend job
    outputs:
      app_hostname: ${{ steps.tf_outputs.outputs.hostname }}
    
    # Define ALL environment variables needed for steps in this job here
    env:
      # === Terraform Input Variables ===
      # Set the environment variable for Terraform tags/logic
      TF_VAR_environment: ${{ github.ref_name }}
      # Pass secrets/vars needed by Terraform config as TF_VAR_
      TF_VAR_az_client_id: ${{ secrets.AZURE_CLIENT_ID }} # Often not needed in TF config if using OIDC auth for provider
      TF_VAR_az_tenant_id: ${{ secrets.AZURE_TENANT_ID }} # Often not needed in TF config if using OIDC auth for provider
      TF_VAR_az_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Often not needed in TF config if using OIDC auth for provider
      TF_VAR_az_container_name: ${{ vars.AZURE_BKD_CONTAINER_NAME }} # Needed for backend config? Check TF code.
      TF_VAR_repository_token: ${{ secrets.AZURE_REPOSITORY_TOKEN }}
      TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
      TF_VAR_az_object_id: ${{ secrets.AZURE_OBJECT_ID }} # Usually relates to RBAC assignments within TF

      # === Azure Provider Auth (via OIDC - handled by azure/login) ===
      # These might be redundant if azure/login works correctly, but ARM_USE_OIDC is often helpful
      # ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }} # Usually picked up automatically
      # ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Usually picked up automatically
      # ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }} # Usually picked up automatically
      ARM_USE_OIDC: true # Explicitly tell provider to use OIDC

      # === Terraform Backend Config Variables ===
      # Define these here for use in the init step command line
      TF_BACKEND_RG_NAME: ${{ vars.AZURE_BKD_RGROUP_NAME }}
      TF_BACKEND_SA_NAME: ${{ vars.AZURE_BKD_SA_NAME }}
      TF_BACKEND_CONTAINER_NAME: ${{ vars.AZURE_BKD_CONTAINER_NAME }}
      TF_BACKEND_KEY: archie-${{ github.ref_name }}.tfstate

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id:        ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:        ${{ secrets.AZURE_TENANT_ID }}
          subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
      
      - name: Terraform Init
        working-directory: ./infra  # Update the working directory to the new infra folder
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RG_NAME }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_SA_NAME }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ env.TF_BACKEND_KEY }}"
      
      - name: Terraform Validate
        working-directory: ./infra
        run: terraform validate
    
      - name: Terraform Plan
        working-directory: ./infra
        id: plan # Give step an ID
        run: terraform plan -var-file="${{ github.ref_name }}.tfvars" -out=tfplan  
    
      - name: Terraform Apply
        working-directory: ./infra
        if: github.ref_name == 'dev'
        run: terraform apply -auto-approve tfplan
        # Note: No need to set TF_VARs inside this run block

      - name: Get Terraform Outputs
        working-directory: ./infra
        id: tf_outputs
        run: |
          echo "Attempting to get Terraform outputs..."
          api_key_val=$(terraform output -raw static_web_app_api_key)
          hostname_val=$(terraform output -raw static_web_app_default_host_name)

          if [ -z "$api_key_val" ]; then
            echo "::error::Fetched static_web_app_api_key is empty!"
            exit 1
          fi

          echo "Saving API key to deployment_token.txt"
          # Ensure saving to correct relative path if CWD is still ./infra
          echo "$api_key_val" > deployment_token.txt # Saves within ./infra

          echo "Setting job outputs (hostname only)"
          echo "hostname=$hostname_val" >> $GITHUB_OUTPUT

          echo "Masking retrieved API key."
          echo "::add-mask::$api_key_val"

      - name: Upload Deployment Token Artifact
        uses: actions/upload-artifact@v4
        with:
          name: deployment-token-artifact
          # Path relative to the workspace root, so specify infra
          path: ./infra/deployment_token.txt
          retention-days: 1

  # Step 3: Build and Deploy Application to Static Web App
  build_and_deploy_app:
    name: Deploy App
    runs-on: ubuntu-latest
    needs: deploy # Run after infrastructure is deployed/updated
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Deployment Token Artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-token-artifact

      - name: Read Deployment Token from File
        id: read_token
        run: |
          token_val=$(cat ./deployment_token.txt) # It's now at the root
          echo "::add-mask::$token_val"
          echo "deployment_token_step_output=$token_val" >> $GITHUB_OUTPUT
  
      - name: Deploy to Azure Static Web App
        id: swa_deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.read_token.outputs.deployment_token_step_output }}
          action: "upload"
          app_location: "/frontend"
          api_location: "/backend"
          output_location: "build"          

  # Step 4: Report Deployment URL
  report_url:
    name: Report
    runs-on: ubuntu-latest
    needs: [deploy, build_and_deploy_app] # Depends on both infra and app deployment
    steps:
      - name: Display Deployed URL
        run: |
          echo "------------------------------------------------------------------"
          echo "âœ… Application deployed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "URL: https://${{ needs.deploy.outputs.app_hostname }}"
          echo "------------------------------------------------------------------"