name: Deploy Environment

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - qa
      - main

permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Default permission for accessing the repo

jobs:
  # Step 1: Bootstrap Backend Resources (if not already done)
  backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}  # Use the branch name as environment
    outputs:
      environment: ${{ steps.setenv.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id:        ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:        ${{ secrets.AZURE_TENANT_ID }}
          subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create backend resources
        run: |
          # Define variables for the backend resources
          az_backend_rg_name="${{ vars.AZURE_BKD_RGROUP_NAME }}"
          az_backend_sa_name="${{ vars.AZURE_BKD_SA_NAME }}"
          az_backend_container_name="${{ vars.AZURE_BKD_CONTAINER_NAME }}"
          az_location="${{ vars.AZURE_LOCATION }}"
          
          # Create resource group if it doesn't exist
          az group create --name $az_backend_rg_name --location $az_location

          # Create storage account if it doesn't exist
          az storage account create \
            --name $az_backend_sa_name \
            --resource-group $az_backend_rg_name \
            --location $az_location \
            --sku Standard_LRS

          # Adding a small delay to ensure the storage account is fully provisioned
          sleep 30

          # Get the storage account key
          STORAGE_KEY=$(az storage account keys list --resource-group $az_backend_rg_name --account-name $az_backend_sa_name --query '[0].value' -o tsv)

          # Create storage container if it doesn't exist
          az storage container create \
            --name $az_backend_container_name \
            --account-name $az_backend_sa_name \
            --account-key $STORAGE_KEY
  
  # Main Terraform Deployment
  deploy:
    name: Deploy Environment
    runs-on: ubuntu-latest
    needs: backend  # Ensure backend resources are created first
    environment: ${{ github.ref_name }}  # Use the branch name as environment
    outputs:
      environment: ${{ steps.setenv.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id:        ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:        ${{ secrets.AZURE_TENANT_ID }}
          subscription-id:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: Set Azure Subscription
      #   run:  |
      #     echo "Setting Azure Subscription to: ${{ secrets.AZURE_SUBSCRIPTION_ID }}"
      #     az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Step to install Terraform
      - name: Install Terraform
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
          unzip terraform_1.5.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

      # Initialize and applyTerraform
      - name: Terraform Init and Apply
        run: |          
          terraform init
          terraform apply -auto-approve -var="environment=${{ needs.backend.outputs.environment }}" -var="storage_account_name=${{ vars.AZURE_BKD_SA_NAME }}" -var="container_name=${{ vars.AZURE_BKD_CONTAINER_NAME }}"