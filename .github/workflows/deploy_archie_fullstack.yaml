# .github/workflows/deploy_archie_fullstack.yaml
name: Deploy Archie Full Stack (with Resource Creation)

# --- Workflow Triggers ---
on:
  push:
    branches:
      - dev       # Trigger on push to dev branch
      - qa        # Trigger on push to qa branch
      - main      # Trigger on push to main branch
  workflow_dispatch: # Allow manual triggering from GitHub UI

# --- Permissions ---
permissions:
  id-token: write # Required for Azure OIDC Login
  contents: read  # Required for actions/checkout

# --- Global Environment Variables ---  



# --- Jobs ---
jobs:
  # --- Backend Infrastructure and Deployment Job ---
  build_and_deploy_backend:
    name: Provision & Deploy Backend (Functions) - ${{ github.ref_name }}
    runs-on: ubuntu-latest

    environment:
      name: ${{ (github.ref == 'refs/heads/dev' && 'dev') || (github.ref == 'refs/heads/qa' && 'qa') || (github.ref == 'refs/heads/main' && 'main') }}
      # URL output is complex for Function Apps created via CLI, manually configure if needed.

    steps:
      - name: Set Global Environment Variables
        run: |
          echo "AZURE_LOCATION=Switzerland North" >> $GITHUB_ENV
          echo "ENV_SUFFIX=${{ github.ref_name == 'dev' && 'dev' || github.ref_name == 'qa' && 'qa' || github.ref_name == 'main' && 'main' }}" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP_NAME=rg-archie-${{ github.ref_name == 'dev' && 'dev' || github.ref_name == 'qa' && 'qa' || github.ref_name == 'main' && 'main' }}" >> $GITHUB_ENV
          echo "AZURE_STORAGE_ACCOUNT_NAME=saarchie${{ github.ref_name == 'dev' && 'dev' || github.ref_name == 'qa' && 'qa' || github.ref_name == 'main' && 'main' }}" >> $GITHUB_ENV
          echo "AZURE_FUNCTIONAPP_NAME=archie-func-${{ env.ENV_SUFFIX }}" >> $GITHUB_ENV
          echo "AZURE_FUNCTIONAPP_PLAN_NAME=plan-archie-${{ env.ENV_SUFFIX }}" >> $GITHUB_ENV
          echo "PYTHON_VERSION=3.11" >> $GITHUB_ENV
          echo "AZURE_FUNCTIONAPP_PACKAGE_PATH=backend/ArchieMCPFunctionApp" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Azure Login using OIDC'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Create/Update Azure Resource Group
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Ensuring resource group ${{ env.AZURE_RESOURCE_GROUP_NAME }} exists in ${{ env.AZURE_LOCATION }}..."
            az group create --name "${{ env.AZURE_RESOURCE_GROUP_NAME }}" --location "${{ env.AZURE_LOCATION }}" --output none

      - name: Create/Update Azure Storage Account
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Ensuring storage account ${{ env.AZURE_STORAGE_ACCOUNT_NAME }} exists..."
            az storage account create \
              --name "${{ env.AZURE_STORAGE_ACCOUNT_NAME }}" \
              --resource-group "${{ env.AZURE_RESOURCE_GROUP_NAME }}" \
              --location "${{ env.AZURE_LOCATION }}" \
              --sku Standard_LRS \
              --kind StorageV2 \
              --allow-blob-public-access false \
              --output none

      - name: Create/Update Azure Function App Plan (Consumption)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Ensuring App Service plan ${{ env.AZURE_FUNCTIONAPP_PLAN_NAME }} exists..."
            az functionapp plan create \
              --name "${{ env.AZURE_FUNCTIONAPP_PLAN_NAME }}" \
              --resource-group "${{ env.AZURE_RESOURCE_GROUP_NAME }}" \
              --location "${{ env.AZURE_LOCATION }}" \
              --sku Y1 \
              --is-linux true \
              --output none

      - name: Create/Update Azure Function App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Ensuring Function App ${{ env.AZURE_FUNCTIONAPP_NAME }} exists..."
            az functionapp create \
              --name "${{ env.AZURE_FUNCTIONAPP_NAME }}" \
              --resource-group "${{ env.AZURE_RESOURCE_GROUP_NAME }}" \
              --storage-account "${{ env.AZURE_STORAGE_ACCOUNT_NAME }}" \
              --plan "${{ env.AZURE_FUNCTIONAPP_PLAN_NAME }}" \
              --runtime python \
              --runtime-version "${{ env.PYTHON_VERSION }}" \
              --functions-version 4 \
              --os-type Linux \
              --output none
            # Optional: Configure CORS, settings etc. here if needed
            # az functionapp cors add --name "${{ env.AZURE_FUNCTIONAPP_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP_NAME }}" --allowed-origins '*' # Example CORS

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        shell: bash
        run: |
          echo "Installing dependencies from ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt"
          python -m pip install --upgrade pip
          # Correct target path for Azure Functions deployment structure
          pip install -r "${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/requirements.txt" --target="${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/.python_packages/lib/python${{ env.PYTHON_VERSION }}/site-packages"

      - name: 'Deploy Code to Azure Function App'
        id: deploy_function_app
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
          # No need to specify resource group here, app-name is unique identifier for this action

      - name: Azure Logout
        run: az logout
        if: always()

  # --- Frontend Infrastructure and Deployment Job ---
  build_and_deploy_frontend:
    name: Provision & Deploy Frontend (SWA) - ${{ github.ref_name }}
    runs-on: ubuntu-latest
    needs: build_and_deploy_backend # Ensure RG and backend infra exist first

    environment:
      name: ${{ (github.ref == 'refs/heads/dev' && 'dev') || (github.ref == 'refs/heads/qa' && 'qa') || (github.ref == 'refs/heads/main' && 'main') }}
      # SWA URL can be retrieved via CLI if needed, but often manually set in Env settings

    steps:
      - name: Set Global Environment Variables
        run: |
          echo "AZURE_LOCATION=Switzerland North" >> $GITHUB_ENV
          echo "ENV_SUFFIX=${{ github.ref == 'refs/heads/dev' && 'dev' || github.ref == 'refs/heads/qa' && 'qa' || github.ref == 'refs/heads/main' && 'main' }}" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP_NAME=rg-archie-${{ env.ENV_SUFFIX }}" >> $GITHUB_ENV
          echo "AZURE_STATIC_WEB_APP_NAME=archie-swa-${{ env.ENV_SUFFIX }}" >> $GITHUB_ENV
          echo "NODE_VERSION=18" >> $GITHUB_ENV
          echo "FRONTEND_APP_PATH=frontend/front-end" >> $GITHUB_ENV
          echo "FRONTEND_OUTPUT_PATH=dist" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Azure Login using OIDC'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Resource Group creation is technically redundant due to 'needs', but harmless and good practice
      - name: Ensure Azure Resource Group Exists
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Ensuring resource group ${{ env.AZURE_RESOURCE_GROUP_NAME }} exists in ${{ env.AZURE_LOCATION }}..."
            az group create --name "${{ env.AZURE_RESOURCE_GROUP_NAME }}" --location "${{ env.AZURE_LOCATION }}" --output none

      - name: Create/Update Azure Static Web App Resource
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Ensuring Static Web App resource ${{ env.AZURE_STATIC_WEB_APP_NAME }} exists..."
            # Check if SWA exists
            swa_exists=$(az staticwebapp show --name "${{ env.AZURE_STATIC_WEB_APP_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP_NAME }}" --query name -o tsv 2>/dev/null)
            if [[ -z "$swa_exists" ]]; then
              echo "Static Web App not found, creating..."
              az staticwebapp create \
                --name "${{ env.AZURE_STATIC_WEB_APP_NAME }}" \
                --resource-group "${{ env.AZURE_RESOURCE_GROUP_NAME }}" \
                --location "${{ env.AZURE_LOCATION }}" \
                --source /dev/null --branch main # Dummy source/branch needed for creation, we upload manually
                --output none
              echo "Static Web App created."
            else
              echo "Static Web App already exists."
            fi

      - name: Get Static Web App Deployment Token
        id: swa_token
        uses: azure/CLI@v1
        with:
          inlineScript: |
            echo "Retrieving deployment token for ${{ env.AZURE_STATIC_WEB_APP_NAME }}..."
            token=$(az staticwebapp secrets list --name "${{ env.AZURE_STATIC_WEB_APP_NAME }}" --resource-group "${{ env.AZURE_RESOURCE_GROUP_NAME }}" --query "properties.apiKey" -o tsv)
            if [[ -z "$token" ]]; then
              echo "::error::Could not retrieve deployment token for Static Web App."
              exit 1
            fi
            # Mask the token in logs and make it available as an output
            echo "::add-mask::$token"
            echo "deployment_token=$token" >> $GITHUB_OUTPUT

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_APP_PATH }}/package-lock.json

      - name: Install Frontend Dependencies
        working-directory: ${{ env.FRONTEND_APP_PATH }}
        run: npm ci

      - name: Build Frontend Application
        working-directory: ${{ env.FRONTEND_APP_PATH }}
        run: npm run build

      - name: 'Deploy Code to Azure Static Web App'
        id: deploy_static_web_app
        uses: Azure/static-web-apps-deploy@v1
        with:
          # --- Use the token retrieved dynamically in the previous step ---
          azure_static_web_apps_api_token: ${{ steps.swa_token.outputs.deployment_token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"

          # --- Configuration ---
          app_location: ${{ env.FRONTEND_APP_PATH }} # Path to source code relative to root
          # Output location is relative to app_location for the build, but relative to root for the deploy action *when specified like this*
          # It expects the final build artifact path relative to the root.
          output_location: "${{ env.FRONTEND_APP_PATH }}/${{ env.FRONTEND_OUTPUT_PATH }}" # e.g., frontend/front-end/dist
          # api_location: "" # Correct - API deployed separately

      - name: Azure Logout
        run: az logout
        if: always()
