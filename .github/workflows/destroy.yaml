# Destroy Azure Resources Workflow
name: Destroy

on:
  workflow_dispatch:
    inputs:
        environment:
          description: 'Environment to destroy (dev/qa/main)'
          required: true
          type: choice
          options:
            - dev
            - qa
            - main

permissions:
  id-token: write
  contents: read

jobs:
  # Job 1: Destroy Terraform-Managed Resources
  destroy_terraform_resources: # Renamed for clarity
    name: Destroy Terraform Resources (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    # Use the environment selected in the workflow dispatch input
    environment: ${{ github.event.inputs.environment }}

    # Define ALL environment variables needed for steps in this job here
    env:
      # === Terraform Input Variables (Only those potentially needed for providers/config) ===
      TF_VAR_environment: ${{ github.event.inputs.environment }} # Pass selected environment
      # Keep vars needed by TF config (e.g., Key Vault definition read during destroy)
      TF_VAR_az_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_az_object_id: ${{ secrets.AZURE_OBJECT_ID }}
      TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }} # Only if needed by config during destroy

      # === Azure Provider Auth ===
      ARM_USE_OIDC: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}       # Needed for OIDC auth
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}       # Needed for OIDC auth
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Explicitly set for provider

      # === Terraform Backend Config Variables ===
      TF_BACKEND_RG_NAME: ${{ vars.AZURE_BKD_RGROUP_NAME }}
      TF_BACKEND_SA_NAME: ${{ vars.AZURE_BKD_SA_NAME }}
      TF_BACKEND_CONTAINER_NAME: ${{ vars.AZURE_BKD_CONTAINER_NAME }}
      # Use the input environment for the key name
      TF_BACKEND_KEY: archie-${{ github.event.inputs.environment }}.tfstate

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3 # Updated version
        with:
          terraform_version: latest # Or pin a version e.g., "1.8.0"
  
      - name: Terraform Init
        working-directory: ./infra
        # Use env vars defined at job level for backend config flags
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RG_NAME }}" \
            -backend-config="storage_account_name=${{ env.TF_BACKEND_SA_NAME }}" \
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER_NAME }}" \
            -backend-config="key=${{ env.TF_BACKEND_KEY }}"
  
      - name: Terraform Destroy
        working-directory: ./infra
        # Use the var file corresponding to the input environment
        run: terraform destroy -var-file="${{ github.event.inputs.environment }}.tfvars" -auto-approve
        # Env vars for auth are inherited from the job level
      
  destroy_backend_resources: # Job 2: Destroy Backend Resources
    name: Destroy Backend
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }} # Use environment specified in workflow dispatch
    needs: destroy_terraform_resources # Ensure this runs after the destroy job
    steps:

      - name: Login to Azure using OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Destroy Backend Resource Group
        run: |
          az_backend_rg_name="${{ vars.AZURE_BKD_RGROUP_NAME }}"
          echo "Attempting to delete backend resource group: $az_backend_rg_name"
  
          # Check if group exists
          if az group show --name $az_backend_rg_name &> /dev/null; then
            echo "Resource group $az_backend_rg_name exists. Proceeding with deletion..."
            # Delete the entire backend resource group - this deletes the SA and Container inside it
            az group delete --name $az_backend_rg_name --yes --no-wait
            echo "Deletion command issued for resource group $az_backend_rg_name (using --no-wait)."
          else
            echo "Resource group $az_backend_rg_name does not exist. Skipping deletion."
          fi