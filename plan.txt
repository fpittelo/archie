# EPFL ADOIT-OpenAI Integration Project Roadmap

**Overall Project Goal:** Develop an intelligent assistant for interacting with and populating the EPFL ADOIT architecture repository using OpenAI, leveraging EPFL's existing Azure, Entra ID, and GitHub infrastructure. The application will be referred to as "Archie".

## Phases and Milestones:

### Phase 1: Foundation and MVP (Minimum Viable Product) - "Find Editors"

*   **Milestone 1: Environment Setup and Core Components (Weeks 1-3)**
    *   [v] Set up Azure resources: Azure Functions (for MCP Server), Azure Static Web App (for UI), Azure Key Vault.
    *   [x] Configure GitHub repository and initial CI/CD pipeline (basic linting, formatting, deployment to staging environment).
    *   [x] Set up developer workstations (Python environment, necessary libraries, IDE configuration).
    *   [v] Register the "Archie AI" web application in EPFL Entra ID and configure ADOIT for OIDC delegated permissions (in collaboration with ADOIT administrators).
    *   [v] Verify basic connectivity: UI can authenticate users via Entra ID, Azure Functions can be triggered.
    *   [v] **Early ADOIT API Deep Dive:** Dedicate time to investigate the ADOIT API's capabilities and limitations, especially for write operations. Confirm feasibility using intended OIDC delegated permissions.
    *   **Deliverables:**
        *   Working Azure environment with core services.
        *   Basic CI/CD pipeline in place.
        *   Entra ID application registration and ADOIT OIDC configuration completed.

*   **Milestone 2: Basic UI and MCP Server Skeleton (Weeks 4-6)**
    *   [ ] Develop a basic React/Vue.js/Angular UI:
        *   [ ] Login with Entra ID.
        *   [ ] Simple application selection dropdown (hardcoded list for now).
        *   [ ] "Find Editors" button.
        *   [ ] Basic results display area.
    *   [ ] Develop the MCP Server (Azure Functions) skeleton:
        *   [ ] Single endpoint to handle the "Find Editors" request.
        *   [ ] Basic request validation (check for valid ADOIT access token).
        *   [ ] Placeholder for OpenAI interaction (no actual API call yet).
        *   [ ] Placeholder for ADOIT API interaction (no actual API calls yet).
        *   [ ] Implement "Editor Finder Agent" as a module.
    *   [ ] Implement logging (to Azure Application Insights).
    *   [ ] **Explicit Error Handling Strategy (Basic):** Define a basic error handling strategy for scenarios like ADOIT downtime, OpenAI errors, API call failures, and data parsing issues.
    *   [ ] **Data Flow Visualization:** Create a diagram illustrating the flow of data and authentication tokens between the User, UI (Static Web App), Entra ID, MCP Server (Azure Functions), ADOIT API, and Azure OpenAI API.
    *   **Deliverables:**
        *   Functional, but very basic, UI.
        *   Skeleton MCP Server with request handling and logging.

*   **Milestone 3: ADOIT API Integration (Read-Only) (Weeks 7-9)**
    *   [ ] Implement ADOIT API client (Python) in the MCP Server.
    *   [ ] Implement the "read" functionality:
        *   [ ] Fetch the list of applications from ADOIT (to populate the UI dropdown).
        *   [ ] Retrieve application details (name, description) based on selected application ID.
    *   [ ] Use the delegated access token from the UI for ADOIT API calls.
    *   [ ] **Integrated Testing:** Include unit and integration testing tasks for the ADOIT client module.
    *   **Deliverables:**
        *   UI dropdown populated with real application data from ADOIT.
        *   MCP Server can retrieve application details from ADOIT.

*   **Milestone 4: OpenAI Integration - "Find Editors" Logic (Weeks 10-12)**
    *   [ ] Implement the OpenAI integration within the "Editor Finder Agent" in the MCP Server.
    *   [ ] Develop and refine the prompt for the "Find Editors" use case (as discussed previously).
    *   [ ] Send the prompt to the OpenAI API.
    *   [ ] Parse the OpenAI response (JSON).
    *   [ ] Handle potential errors from OpenAI.
    *   [ ] **Integrated Testing:** Include unit and integration testing tasks for the OpenAI interaction logic.
    *   **Deliverables:**
        *   MCP Server can send requests to OpenAI and process responses.
        *   Functional "Find Editors" logic (but without writing to ADOIT yet).

*   **Milestone 5: ADOIT API Integration (Write) & MVP Completion (Weeks 13-15)**
    *   [ ] Implement the "write" functionality in the ADOIT API client:
        *   [ ] Create/update contacts (editors).
        *   [ ] Create relationships between applications and editors.
    *   [ ] Integrate the write logic into the "Editor Finder Agent."
    *   [ ] Thorough testing of the entire "Find Editors" flow.
        *   [ ] **Integrated Testing:** End-to-end testing of the "Find Editors" flow.
    *   [ ] Deploy to a production environment.
    *   **Deliverables:**
        *   **MVP Complete:** A fully functional "Find Editors" feature, allowing users to find and add editors to applications in ADOIT via the OpenAI-powered assistant.
        *   End-to-end testing complete.
        *   Deployed to production.

### Phase 2: Expansion and Refinement (Iterative)

*   **Milestone 6: Additional Use Cases (Weeks 16-20)**
    *   [ ] Gather user feedback on the MVP.
    *   [ ] Identify and prioritize additional use cases (e.g., identifying application dependencies, finding business owners, suggesting ArchiMate elements).
    *   [ ] Develop and implement new agents for each use case, following the pattern established in Phase 1 (UI update, MCP Server logic, prompt engineering, ADOIT API interaction).
        *   [ ] Add new agents to the MCP.
    *   [ ] **Agent Management/Routing:** Define how the MCP Server will manage and route requests to the correct agent (conditional logic or dynamic registration/routing mechanism).
    *   **Deliverables:**
        *   New features added to the "Archie AI Assistant," expanding its capabilities.

*   **Milestone 7: Enhanced Prompt Engineering and Context Management (Weeks 21-25)**
    *   [ ] Refine prompts for existing use cases based on user feedback and performance analysis.
    *   [ ] Explore advanced prompting techniques (e.g., chain-of-thought, few-shot learning).
    *   [ ] Improve context management within the MCP Server (e.g., using `langchain` to manage conversation history and relevant ADOIT data).
    *   **Deliverables:**
        *   Improved accuracy and reliability of OpenAI responses.
        *   More sophisticated conversation handling.

*   **Milestone 8: User Interface and Experience Improvements (Weeks 26-30)**
    *   [ ] Enhance the UI based on user feedback.
    *   [ ] Improve error handling and user messaging.
    *   [ ] Add features like:
        *   [ ] User-friendly display of ADOIT data.
        *   [ ] Ability to edit/confirm OpenAI suggestions before writing to ADOIT.
        *   [ ] Search and filtering capabilities.
    *   **Deliverables:**
        *   More intuitive and user-friendly interface.

*   **Milestone 9: Monitoring, Optimization, and Security Review (Ongoing)**
    *   [ ] Continuously monitor performance and cost (Azure Functions, OpenAI API).
    *   [ ] Optimize code and prompts for efficiency.
    *   [ ] Regular security reviews and updates.
    *   [ ] Set up alerts in case of anomalies
    *   **Deliverables:**
        *   Stable, performant, and secure integration.
*   **Milestone 10: Fine Tuning (Future)**
    *   [ ] Gather enough examples
    *   [ ] Fine tuning of the model
    *   **Deliverables:**
        *   Better accuracy of the answers